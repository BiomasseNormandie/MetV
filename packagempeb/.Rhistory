dd.ref=subset(dd,date>=date_deb_ref&date<=date_fin_ref)
for (i in c(ncol(dd.ref):3)){
if (sum(dd.ref[,i])==0){
dd.ref=dd.ref[,-i]
dd.suiv=dd.suiv[,-i]
}
}
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('inst/shiny')
runApp('inst/shiny')
data.load=read.csv2("C:/Users/q.giffard/Desktop/test1.csv", header = TRUE, encoding="UTF-8")
aggregation(data.load)
aggregation(data.load,"Jour")
data.load$date=as.POSIXct(data.load$date,format="%d/%m/%Y %H:%M")
aggregation(data.load,"Jour")
m=aggregation(data.load,"Jour")
m
m$DJU=if(m$Temperature<18,18-m$Temperature,0)
m$DJU=ifelse(m$Temperature<18,18-m$Temperature,0)
left_join(data.load,m,by=date)
dplyr::left_join(data.load,m,by=date)
dplyr::left_join(data.load,m,by="date")
data.load$temp=date(data.load$date)
data.load$date=date(data.load$date)
dplyr::left_join(data.load,m,by="date")
dplyr::left_join(data.load,m$DJU,by="date")
dplyr::left_join(data.load,m[,c("date","DJU")],by="date")
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
View(z)
z<-z[,-which(colnames(z)=="date")]
colnames(z)["Temp"]="date"
colnames(z)[which(colnames(z)=="Temp")]="date"
colnames(z)[which(colnames(z)=="Temp")]
which(colnames(z)=="Temp")
View(z)
which(colnames(z)=="temp")
colnames(datas$df_bis)["dazf"]
colnames(z)["dazf"]
colnames(z)[which(colnames(z)=="dazf")]
colnames(z)[which(colnames(z)=="dazf")]<-"date"
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
select_station(liste_station,min(as.Date(data.load[["date"]])),max(as.Date(data.load[["date"]])))
max(as.Date(data.load[["date"]]))
as.Date(data.load[["date"]])
max(as.Date(data.load[["date"]]))
max(data.load[["date"]])
max(data.load[["date"]],na.rm=TRUE)
summary(data.load)
a=data.load[!is.na(data.load$date),]
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/packagempeb/inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
packagempeb:::launch_mpeb()
packagempeb:::launch_mpeb()
packagempeb:::launch_mpeb()
library(packagempeb)
packagempeb:::launch_mpeb()
packagempeb:::launch_mpeb()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
rm(list=aggreg)
rm(aggreg)
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
rm(list())
rm(list=all)
rm(list=all())
rm(list=ls())
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages("shinybusy")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/packagempeb/inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages("shinycssloaders")
library(shinycssloaders)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('inst/shiny')
packagempeb:::launch_mpeb()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
View(ab)
View(ba)
View(uncertainty)
View(uncertainty)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
dd=xx
date_deb_ref=xa
date_fin_ref=xb
econ=0
dd.suiv=subset(dd,date<date_deb_ref|date>date_fin_ref)
dd.ref=subset(dd,date>=date_deb_ref&date<=date_fin_ref)
for (i in c(ncol(dd.ref):3)){
if (sum(dd.ref[,i])==0){
dd.ref=dd.ref[,-i]
dd.suiv=dd.suiv[,-i]
}
}
dd.ref$energie=dd.ref$energie*(1-econ/100)
col_rem=which(colnames(dd.ref)=="prediction")
design_matrix_ref=as.matrix(cbind(c(rep(1, nrow(dd.ref))),dd.ref[,-c(1,2,col_rem)]))
design_matrix_suiv=as.matrix(cbind(c(rep(1, nrow(dd.suiv))),dd.suiv[,-c(1,2,col_rem)]))
hat_matrix=design_matrix_suiv%*%solve(t(design_matrix_ref)%*%design_matrix_ref)
hat_matrix2=design_matrix_ref%*%solve(t(design_matrix_ref)%*%design_matrix_ref)
RMSE=sqrt(sum((dd.ref$prediction-dd.ref$energie)^2)/(nrow(dd.suiv)-ncol(dd.suiv)+2))
# if (dd$date[2]-dd$date[1]<minutes(30)){
hat_matrix=colSums(t(hat_matrix)*t(design_matrix_suiv))
U_stepbis=RMSE*(sqrt(1+hat_matrix))
hat_matrix2=colSums(t(hat_matrix2)*t(design_matrix_ref))
U_stepbis2=RMSE*(sqrt(1+hat_matrix2))
# }else{
# hat_matrix=hat_matrix%*%t(design_matrix_suiv)
# U_stepbis=RMSE*(sqrt(1+colSums(hat_matrix)))
# hat_matrix2=hat_matrix2%*%t(design_matrix_ref)
# U_stepbis2=RMSE*(sqrt(1+colSums(hat_matrix2)))
# }
S=sqrt(sum((U_stepbis2)^2)/length(U_stepbis2))
Utotbis=round(sqrt(sum((U_stepbis2)^2))/sum(dd.ref$energie)*100,2)
Urep=data.frame(Ufdx=U_stepbis,S=rep(S,length(S)),Utotbis=rep(Utotbis,length(U_stepbis)),date=dd.suiv$date, Utot=round(sqrt(sum((U_stepbis2)^2)),2))
subset(xx,date<as.POSIXct(input$dateRef[1])|date>input$dateRef[2])
subset(xx,date<as.POSIXct(xa)|date>xb)
p=subset(xx,date<as.POSIXct(xa)|date>xb)
p=subset(xx,date<xa|date>xb)
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/packagempeb/inst/shiny')
runApp('inst/shiny')
library(packagempeb)
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
library(packagempeb)
library(packagempeb)
?aggregation
?dataset
?launch_mpeb
library(packagempeb)
?package_mpeb
package_mpeb
help(packagempeb)
packagempeb
?packagempeb
??packagempeb
library(rgdal)
a=readOGR("C:/Users/q.giffard/Desktop/barrages/N_ROE_062.shp")
plot(a)
a=readOGR("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
plot(a)
a=readOGR("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
?readOGR
a=readOGR("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp", layer="Nature")
a=readOGR("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp", drop_unsupported_fields=TRUE)
a=maptools::readShapeSpatial("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp", drop_unsupported_fields=TRUE)
)
a=maptools::readShapeSpatial("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
a=readOGR("C:/Users/q.giffard/Desktop/barrages", layer="NoeudHydrographique_28_Normandie.shp")
a=readOGR("C:/Users/q.giffard/Desktop/barrages", layer="NoeudHydrographique_28_Normandie.shp")
a=readOGR(dsn="C:/Users/q.giffard/Desktop/barrages", layer="NoeudHydrographique_28_Normandie.shp")
a=readOGR(dsn="C:/Users/q.giffard/Desktop/barrages/", layer="NoeudHydrographique_28_Normandie.shp")
a=readOGR(dsn="C:/Users/q.giffard/Desktop/barrages", layer="NoeudHydrographique_28_Normandie.shp")
a=sf::st_read(dsn="C:/Users/q.giffard/Desktop/barrages", layer="NoeudHydrographique_28_Normandie.shp")
a=sf::st_read("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
plot(a)
grepl("Barrage",a$Nature)
a[grepl("Barrage",a$Nature),]
a=a[grepl("Barrage",a$Nature),]
View(a)
a=sf::st_read("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
View(a)
View(a)
a=grepl("Barrage",a$Nature)
a=sf::st_read("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
a=a=[grepl("Barrage",a$Nature),]
a=a[grepl("Barrage",a$Nature),]
plot(a)
coordinates(a)<-~a$geometry
leaflet()%>%
addTiles()%>%
addPolygons(a)
leaflet::leaflet()%>%
addTiles()%>%
addPolygons(a)
library(leaflet)
leaflet()%>%
addTiles()%>%
addPolygons(a)
a$geometry
a$geometry[1]
a$geometry[,1]
a$geometry[1,]
a$geometry$x
a$geometry$X
a$geometry["X"]
leaflet(a)%>%
addTiles()%>%
addPolygons()
b=st_transform(a, crs="+init=epsg:4326")
b=sf::st_transform(a, crs="+init=epsg:4326")
View(b)
leaflet(b)%>%
addTiles()%>%
addPolygons()
leaflet(b)%>%
addTiles()%>%
addMarkers()
b=sf::as_Spatial(a)
View(b)
leaflet(b)%>%
addTiles()%>%
addMarkers()
a=a%>%st_cast("POINT")
a=a%>%sf::st_cast("POINT")
b=sf::as_Spatial(a)
leaflet(b)%>%
addTiles()%>%
addMarkers()
View(b)
proj4string(b)<- CRS("+proj=longlat +datum=WGS84")
library(leaflet)
leaflet(b)%>%
addTiles()%>%
addMarkers()
a=sf::st_read("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
a=a[grepl("Barrage",a$Nature),]
a=a%>%sf::st_cast("POINT")
b=sf::as_Spatial(a)
proj4string(b)<- CRS("+proj=longlat +datum=WGS84")
a=sf::st_read("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
a=a[grepl("Barrage",a$Nature),]
a=a%>%sf::st_cast("POINT")
View(a)
a=a%>%sf::st_cast("POINT")%>%sf::as.Spatial()
a=a%>%sf::st_cast("POINT")%>%sf::as("Spatial")
a=a%>%sf::st_cast("POINT")%>%as("Spatial")
View(a)
proj4string(a)<- CRS("+proj=longlat +datum=WGS84")
View(a)
CRS(A)
CRS(a)
crs(a)
library(sf)
crs(a)
CRS(a)
View(a)
a@coords
a@coords=a@coords[,1:2]
a@coords
proj4string(a)<- CRS("+proj=longlat +datum=WGS84")
plot(a)
b<- spTransform(a,CRS("+proj=longlat +datum=WGS84"))
View(b)
leaflet(b)%>%
addTiles()%>%
addMarkers()
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addMarkers()
View(a)
a@data
b=b[!is.na(b$NomNoeudHy),]
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addMarkers(popup=NomNoeudHy)
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addMarkers(popup=NomNoeudHy)
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addMarkers(popup=~NomNoeudHy)
b<- spTransform(a,CRS("+proj=longlat +datum=WGS84"))
b=b[!is.na(b$NomNoeudHy),]
library(leaflet)
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addMarkers(popup=~NomNoeudHy)
b<- spTransform(a,CRS("+proj=longlat +datum=WGS84"))
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addMarkers(popup=~NomNoeudHy)
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery.with.Labels') %>%
addMarkers(popup=~NomNoeudHy)
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~NomNoeudHy)
leaflet(b)%>%
addProviderTiles('USGS.USImageryTopo') %>%
# addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~NomNoeudHy)
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~NomNoeudHy)
a=sf::st_read("C:/Users/q.giffard/Desktop/barrages/NoeudHydrographique_28_Normandie.shp")
unique(a$Nature)
p=unique(a$Nature)
writeClipboard(p)
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~paste0("Les coordonnées sont les suivantes : <br>",coords$X,coords$Y))
b$coords
b@coords
b@coords$X
b@coords$coords.x1
b@coords[,1]
b@coords[1]
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~paste0("Les coordonnées sont les suivantes : <br>",b@coords[,1],b@coords[,2]))
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~paste0("Les coordonnées sont les suivantes : <br>Long :",b@coords[,1],"<br>Lat :",b@coords[,2]))
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~paste0("Les coordonnées sont les suivantes : <br>Long :",round(b@coords[,1],4),"<br>Lat :",round(b@coords[,2]),4))
leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~paste0("Les coordonnées sont les suivantes : <br>Long :",round(b@coords[,1],4),"<br>Lat :",round(b@coords[,2],4)))
library(htmlwidgets)
map=leaflet(b)%>%
addProviderTiles('Esri.WorldImagery') %>%
addProviderTiles("CartoDB.PositronOnlyLabels")%>%
addMarkers(popup=~paste0("Les coordonnées sont les suivantes : <br>Long :",round(b@coords[,1],4),"<br>Lat :",round(b@coords[,2],4)))
saveWidget(map,"carte_ROE.html")
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
dataset
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
View(uncertainty)
View(uncertainty)
library(packagempeb)
packagempeb:::launch_mpeb()
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('inst/shiny')
runApp('inst/shiny')
uncertainty$date<as.Date("2018-02-01")
uncertainty$date<as.Date("2018-01-01")
uncertainty$date<as.POSIXct("2018-01-01 00:10:00")
uncertainty$date<as.POSIXct("2018-01-01 10:10:00")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
library(rsconnect)
deployApp("C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/version_web/inst/shiny", appName = "package_mpeb", account = "mpeb"
)
runApp('C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/version_web/inst/shiny')
deployApp("C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/version_web/inst/shiny", appName = "package_mpeb", account = "mpeb"
)
source("dataset.RData")
setwd("C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/version_web/inst/shiny")
source("dataset.RData")
load("dataset.RData")
View(dataset)
deployApp("C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/version_web/inst/shiny", appName = "package_mpeb", account = "mpeb"
)
options("repos" = c("CRAN" = "https://cran.rstudio.com"))
deployApp("C:/Users/q.giffard/BIOMASSE NORMANDIE/Biomasse Team - General/B - ETUDES/3 - COMMUNICATION/3-17-03 CSTB MPEB/2 - Technique/Application R/package/version_web/inst/shiny", appName = "package_mpeb", account = "mpeb"
)
packagempeb:::launch_mpeb()
library(packagempeb)
packagempeb:::launch_mpeb()
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(packagempeb)
packagempeb:::launch_mpeb()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
packagempeb:::launch_mpeb()
